import {go} from 'khufu-routing'
import {set, init, value} from '../value'
import {form, field, submit} from '../form'
import {is_valid_slug} from '../validators'
import {keep_empty_line, check, extract_comment} from './sources'
import {entries} from '../iter'
import {pick, json, refresher} from '../request'
import {graphql_action, on_success} from '../graphql'


style:
  .fixed-width
    width: 10em
  .ui.piled.segment
    z-index: 1
  .strike
    text-decoration: line-through
  .pointer
    cursor: pointer


view sources(router):
  if router.at():
    <div>
      store @schedule = pick('data') | refresher | json('/v1/schedule')
      if @schedule:
        <table.ui.very.basic.selectable.celled.table>
          <tbody>
            for [slug, source] of entries(@schedule.sources) key slug:
              <tr>
                <td>
                  <i.code.big.icon>
                  slug
    <div.ui.basic.segment>
      <button.ui.button>
        link {click} go('new') -> @router
        "New Source"
  elif router.at('new'):
    new_source(router)

view new_source(router):
  <div>
    store @form = form()
      | on_success(router, go, '/settings/sources')
      | graphql_action(`
          mutation CreateSource($slug: String!, $keys: [Key!]!) {
            createSource(slug: $slug, keys: $keys) { ok }
          }
        `)
    store @global_help = value
    store @slug_help = value
    <h1>
      "Adding a New Source "
      <i.help.green.small.circle.icon.pointer.pointer>
        link {click} set(not @global_help) -> @global_help

    if @global_help:
      <div.ui.stackable.grid.container>
        <div.four.wide.column>
          <p.ui.piled.segment.transition.jiggle> "
            A source should be though as an equivalent to a git/mercurial
            repository, although it may include submodules or track forks too or
            might be a part of a monorepo.
          "
        <div.four.wide.column>
          <p.ui.piled.segment.transition.jiggle> "
            More specifically it's a single directory in a cluster where you upload
            container images.  Usually CI system does upload, so upload keys are
            closely tied to a source.
          "
        <div.four.wide.column>
          <p.ui.piled.segment.transition.jiggle> "
            Multiple containers might be uploaded from a source and multiple
            branches are tracked. We keep upgradable and downgradable versions
            for each branch.
          "
        <div.four.wide.column>
          <p.ui.piled.segment.transition.jiggle> "
            You can compose deployment environments from multiple sources.
            Each source having independent version of the code and tracking
            a specific branch.
          "


    <form.ui.form.stackable.grid.container>
      store @slug = field(form, 'slug',  '')
      store @keys = field(form, 'keys', []) | keep_empty_line
      <div.row>
        <div.ui.field.six.wide.column>
          <div.ui.icon.input.loading?(false)>
            <input type="text" placeholder="Slug" id=slug.id>
              link {input} set(this.value) -> @slug
            <i.check?(false).mark.icon>
          <div class="ui pointing label">
            <label for=slug.id>
              "Lowercase alphanumerics and dash only. Not too short. "
            <i.green.circle.question.icon.pointer>
              link {click} set(not @slug_help) -> @slug_help
        if @slug_help:
          <div.ui.field.eight.wide.column.transition.jiggle>
            <div.ui.piled.segment>
              <p>
                "A globally recognizable slug for your repository. "
                "You will be able to upload image into: "
              if not @slug:
                <pre.ui.green.segment>
                  `ciruela upload server:/code-your-slug/...\n`
                  `ciruela upload server:/assets-your-slug/...\n`
              elif is_valid_slug(@slug):
                <pre.ui.green.segment>
                  `ciruela upload server:/code-${@slug}/...\n`
                  `ciruela upload server:/assets-${@slug}/...\n`
              else:
                <pre.ui.red.segment>
                  `ciruela upload server:/code-`
                  <span.ui.label.red>
                    "doesn't fit here"
                  `/...\n`
                  `ciruela upload server:/assets-`
                  <span.ui.label.red>
                    "doesn't fit here"
                  `/...\n`
              <p>
                "Good idea: include a team in name: "
                <code>
                  "crm-celery"
                <br>
                "Bad idea: include a branch or installation: "
                <code.strike>
                  "ninja-staging"
                <br>
                "If name of the project is unique enough, it okay: "
                <code>
                  "drunken-ninja"
                <br>
                "But not if it's a generic name like "
                <code.strike>
                  "worker"
                " or "
                <code.strike>
                  "fileserver"
      <div.row>
        <div.wide.column>
          <div.ui.horizontal.divider.header>
            <i.icon.key>
            "Keys"
      for [id, single_key] of keys.items() key id:
        <div.row>
          <div.ui.input.twelve.wide.column>
            store @key = field(single_key, 'key', '')
            <input.mono type="text" value=@single_key.key placeholder="ssh-key ...">
              link {input} set(this.value) -> @key
              link {input} extract_comment(this.value) -> @single_key
              link {input} check() -> @keys
          <div.ui.input.four.wide.column>
            store @comment = field(single_key, 'comment', '')
            <input.mono type="text" value=@single_key.comment placeholder="Comment/Name">
              link {input} set(this.value) -> @comment
      <div.row>
        <div.field.wide.column>
          <button.ui.button.disabled> "Generate a New Key"
          <div class="ui left pointing label">
            "Not implemented yet"
      if false:
        <div.row>
          <div.wide.column>
            <div.ui.horizontal.divider.header>
              <i.icon.server>
              "Servers"
            <div.ui.raised.segments style="position: relative">
              <div.ui.segment>
                <div.ui.left.ribbon.label.green> "Active"
                <div.ui.basic.label> "alpha"
                <div.ui.basic.label> "gamma"
              <div.ui.segment>
                <div.ui.left.ribbon.label.yellow> "Backup"
                <div.ui.basic.label> "beta"
              <div.ui.segment>
                <div.ui.left.ribbon.label.teal> "Max Allowed"
                <div.ui.blue.label>
                  <i.large.plus.square.outline.icon>
                  "25 "
                  "servers"
              <div.ui.segment>
                <div.ui.left.ribbon.label.blue> "Assets"
                <div.ui.basic.label> "sigma"
                <div.ui.basic.label> "delta"
            <div.field>
              <button.ui.button.disabled> "Change Server Alignment"
              <div class="ui left pointing label">
                "Not implemented yet"
      <div.ui.horizontal.divider>
        <button.ui.large.primary.button
          .disabled?(form.remote.loading)
          .loading?(form.remote.loading)
          type="button">
          link {click} submit(event) -> @form
          "Save"

